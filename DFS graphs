#include <stdio.h>
#include <stdlib.h>

// Structure for a node in the adjacency list
struct AdjListNode {
    int dest;
    struct AdjListNode* next;
};

// Structure for the adjacency list
struct AdjList {
    struct AdjListNode* head;
};

// Structure for the graph
struct Graph {
    int V; // Number of vertices
    struct AdjList* array;
};

// Function to create a new adjacency list node
struct AdjListNode* newAdjListNode(int dest) {
    struct AdjListNode* newNode = (struct AdjListNode*)malloc(sizeof(struct AdjListNode));
    newNode->dest = dest;
    newNode->next = NULL;
    return newNode;
}

// Function to create a graph with V vertices
struct Graph* createGraph(int V) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->V = V;
    graph->array = (struct AdjList*)malloc(V * sizeof(struct AdjList));

    for (int i = 0; i < V; ++i)
        graph->array[i].head = NULL;

    return graph;
}

// Function to add an edge to an undirected graph
void addEdge(struct Graph* graph, int src, int dest) {
    struct AdjListNode* newNode = newAdjListNode(dest);
    newNode->next = graph->array[src].head;
    graph->array[src].head = newNode;

    // Since the graph is undirected, add an edge from dest to src as well
    newNode = newAdjListNode(src);
    newNode->next = graph->array[dest].head;
    graph->array[dest].head = newNode;
}

// Recursive function for DFS traversal
void DFSUtil(struct Graph* graph, int v, int visited[]) {
    visited[v] = 1; // Mark the current node as visited
    printf("%d ", v);

    // Traverse all the adjacent vertices
    struct AdjListNode* currentNode = graph->array[v].head;
    while (currentNode != NULL) {
        int adjVertex = currentNode->dest;
        if (!visited[adjVertex]) {
            DFSUtil(graph, adjVertex, visited);
        }
        currentNode = currentNode->next;
    }
}

// Function to perform DFS traversal starting from a given vertex
void DFS(struct Graph* graph, int startVertex) {
    int* visited = (int*)malloc(graph->V * sizeof(int));

    for (int i = 0; i < graph->V; i++) {
        visited[i] = 0; // Mark all vertices as not visited
    }

    printf("DFS traversal starting from vertex %d: ", startVertex);
    DFSUtil(graph, startVertex, visited);

    free(visited);
}

// Example usage
int main() {
    // Create a graph with 4 vertices
    struct Graph* graph = createGraph(4);

    // Add edges
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 2);
    addEdge(graph, 2, 0);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 3);

    // Perform DFS traversal starting from vertex 2
    DFS(graph, 2);

    // Free allocated memory
    free(graph->array);
    free(graph);

    return 0;
}
