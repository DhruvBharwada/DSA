#include <stdio.h>
#include <stdlib.h>

#define TABLE_SIZE 10

// Structure for a hash table entry
struct HashEntry {
    int key;
    int value;
};

// Structure for the hash table
struct HashTable {
    struct HashEntry* table[TABLE_SIZE];
};

// Function to initialize the hash table
void initializeHashTable(struct HashTable* ht) {
    for (int i = 0; i < TABLE_SIZE; i++) {
        ht->table[i] = NULL;
    }
}

// Function to compute the hash index
int hashFunction(int key) {
    return key % TABLE_SIZE;
}

// Function to insert a key-value pair into the hash table
void insert(struct HashTable* ht, int key, int value) {
    int index = hashFunction(key);

    // Linear probing to find an empty slot
    while (ht->table[index] != NULL) {
        index = (index + 1) % TABLE_SIZE;
    }

    // Create a new entry and insert it into the table
    struct HashEntry* newEntry = (struct HashEntry*)malloc(sizeof(struct HashEntry));
    newEntry->key = key;
    newEntry->value = value;
    ht->table[index] = newEntry;

    printf("Inserted key %d with value %d at index %d\n", key, value, index);
}

// Function to search for a key in the hash table
int search(struct HashTable* ht, int key) {
    int index = hashFunction(key);

    // Linear probing to find the key
    while (ht->table[index] != NULL) {
        if (ht->table[index]->key == key) {
            return index;
        }
        index = (index + 1) % TABLE_SIZE;
    }

    return -1; // Key not found
}

// Example usage
int main() {
    struct HashTable ht;
    initializeHashTable(&ht);

    insert(&ht, 5, 50);
    insert(&ht, 15, 150);
    insert(&ht, 25, 250);

    int searchKey = 15;
    int result = search(&ht, searchKey);

    if (result != -1) {
        printf("Key %d found at index %d\n", searchKey, result);
    } else {
        printf("Key %d not found in the hash table\n", searchKey);
    }

    return 0;
}
