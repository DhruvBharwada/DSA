#include <stdio.h>

#define MAX_SIZE 5

// Structure to represent the Static Stack
struct StaticStack {
    int items[MAX_SIZE];
    int top;
};

// Function to initialize the Static Stack
void initializeStack(struct StaticStack* stack) {
    stack->top = -1;
}

// Function to check if the Static Stack is empty
int isEmpty(struct StaticStack* stack) {
    return (stack->top == -1);
}

// Function to check if the Static Stack is full
int isFull(struct StaticStack* stack) {
    return (stack->top == MAX_SIZE - 1);
}

// Function to push an element onto the Static Stack
void push(struct StaticStack* stack, int value) {
    if (isFull(stack)) {
        printf("Stack is full. Cannot push.\n");
    } else {
        stack->top++;
        stack->items[stack->top] = value;
        printf("%d pushed onto the stack.\n", value);
    }
}

// Function to pop an element from the Static Stack
void pop(struct StaticStack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty. Cannot pop.\n");
    } else {
        printf("%d popped from the stack.\n", stack->items[stack->top]);
        stack->top--;
    }
}

// Function to display the elements of the Static Stack
void display(struct StaticStack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty.\n");
    } else {
        printf("Elements in the stack: ");
        for (int i = 0; i <= stack->top; i++) {
            printf("%d ", stack->items[i]);
        }
        printf("\n");
    }
}

int main() {
    struct StaticStack stack;
    initializeStack(&stack);

    push(&stack, 1);
    push(&stack, 2);
    push(&stack, 3);
    push(&stack, 4);
    push(&stack, 5);

    display(&stack);

    pop(&stack);

    display(&stack);

    push(&stack, 6);

    display(&stack);

    return 0;
}
