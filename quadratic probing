#include <stdio.h>
#include <stdlib.h>

#define TABLE_SIZE 10

// Structure for a hash table entry
struct HashEntry {
    int key;
    int value;
};

// Structure for the hash table
struct HashTable {
    struct HashEntry* table[TABLE_SIZE];
};

// Function to initialize the hash table
void initializeHashTable(struct HashTable* ht) {
    for (int i = 0; i < TABLE_SIZE; i++) {
        ht->table[i] = NULL;
    }
}

// Function to compute the hash index using quadratic probing
int hashFunction(int key, int attempt) {
    return (key + attempt * attempt) % TABLE_SIZE;
}

// Function to insert a key-value pair into the hash table using quadratic probing
void insert(struct HashTable* ht, int key, int value) {
    int attempt = 0;
    int index;

    do {
        index = hashFunction(key, attempt);

        // If the slot is empty, insert the entry
        if (ht->table[index] ==
