#include <stdio.h>
#include <stdlib.h>

// Structure for a node in the singly linked list
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation error\n");
        exit(1);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node at the beginning of the singly linked list
struct Node* insertBeginning(struct Node* head, int data) {
    struct Node* newNode = createNode(data);

    // Set the next of the new node to the current head
    newNode->next = head;

    // Update the head to the new node
    return newNode;
}

// Function to delete the first node from the singly linked list
struct Node* deleteBeginning(struct Node* head) {
    if (head == NULL) {
        printf("List is empty\n");
        return NULL;
    }

    struct Node* temp = head;
    head = head->next;

    // Delete the first node
    free(temp);

    return head;
}

// Function to print the singly linked list
void printList(struct Node* head) {
    printf("Singly Linked List: ");
    while (head != NULL) {
        printf("%d ", head->data);
        head = head->next;
    }
    printf("\n");
}

// Function to free the memory allocated for the singly linked list
void freeList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        struct Node* next = current->next;
        free(current);
        current = next;
    }
}

// Example usage
int main() {
    struct Node* head = NULL;

    head = insertBeginning(head, 10);
    head = insertBeginning(head, 20);
    head = insertBeginning(head, 30);
    head = insertBeginning(head, 40);

    printList(head);

    head = deleteBeginning(head);

    printList(head);

    // Free allocated memory
    freeList(head);

    return 0;
}
